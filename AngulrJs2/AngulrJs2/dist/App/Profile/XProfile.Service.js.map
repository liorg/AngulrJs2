{"version":3,"sources":["Profile/XProfile.Service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAaA;gBAKI,yBAAoB,KAAW;oBAAX,UAAK,GAAL,KAAK,CAAM;oBAJ/B,sDAAsD;oBAC9C,eAAU,GAAG,2BAA2B,CAAC;gBAGd,CAAC;gBAEpC,oCAAU,GAAV;oBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;yBACjC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAuB,QAAQ,CAAC,IAAI,EAAE,EAAtC,CAAsC,CAAC;yBACnE,EAAE,CAAC,UAAA,IAAI;wBACJ,QAAQ,CAAC;wBACT,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BACX,uBAAU,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAClC,CAAC;wBAED,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;oBAC/C,CAAC,CAAE;yBACF,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjC,CAAC;gBAEO,qCAAW,GAAnB,UAAoB,KAAe;oBAC/B,oFAAoF;oBACpF,4CAA4C;oBAC5C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;gBAClE,CAAC;gBA3BL;oBAAC,iBAAU,EAAE;;mCAAA;gBA4Bb,sBAAC;YAAD,CA3BA,AA2BC,IAAA;YA3BD,6CA2BC,CAAA","file":"XProfile.Service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\n\r\nimport { ProfileDetail } from './ProfileDetail.Model';\r\nimport { Result } from './Result.Model';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\n\r\n@Injectable()\r\nexport class XProfileService {\r\n    //private _productUrl = 'Demo/products/products.json';\r\n    private _prfileUrl = 'api/CRM/GetCurrentProfile';\r\n\r\n\r\n    constructor(private _http: Http) { }\r\n\r\n    getProfile(): Observable<Result<ProfileDetail>> {\r\n        return this._http.get(this._prfileUrl)\r\n            .map((response: Response) => <Result<ProfileDetail>>response.json())\r\n            .do(data => {\r\n                debugger;\r\n                if (data.isErr) {\r\n                      Observable.throw(data.desc);\r\n                }\r\n\r\n                console.log('All: ' + JSON.stringify(data))\r\n            } )\r\n            .catch(this.handleError);\r\n    }\r\n    \r\n    private handleError(error: Response) {\r\n        // in a real world app, we may send the server to some remote logging infrastructure\r\n        // instead of just logging it to the console\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || 'Server error');\r\n    }\r\n}\r\n"]}